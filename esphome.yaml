substitutions:
  # change device name to match your desired name
  device_name: "esp-mmwave-60ghz-test"
  # change sensor name below to the one you want to see in Home Assistant
  device_name_pretty: ESP mmWave 60 gHz Test
  # change room name below to the one you want to see in Home Assistant
  room: "Test"
  # change the below to be your WiFi SSID
  ssid: !secret wifi_ssid
  # change the below to be your WiFi password
  wifi_password: !secret wifi_password
  # UART TX Pin
  uart_tx_pin: GPIO17
  # UART RX Pin
  uart_rx_pin: GPIO16
  # Distance sensor multiplier to express meters instead of centimeters
  distance_multiplier: ".01"

esphome:
  name: $device_name

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  logs:
    sensor: INFO # reduced logging to minimize web_server target overload..

# Enable Home Assistant API
api:
  encryption:
    key: "your_key"

ota:
- platform: esphome
  password: "your_pass"

# Connect to WiFi & create captive portal and web server
wifi:
  ssid: "${ssid}"
  password: "${wifi_password}"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name}"
    password: "${wifi_password}"

captive_portal:

web_server:
  port: 80
  version: 2
  include_internal: true

http_request:
  useragent: esphome/$device_name
  verify_ssl: false
  timeout: 2s
  
uart:
  id: uart_bus
  tx_pin: ${uart_tx_pin}
  rx_pin: ${uart_rx_pin}
  baud_rate: 115200
#  debug:
#    direction: BOTH
#    dummy_receiver: false # enabling this, prevents UART byte read in main program, use only for debugging of raw frames and pin assignments
#    sequence:
#      - lambda: UARTDebug::log_hex(direction, bytes, ',');

# External components - double-check all your paths!
#
# your_esphome_root_folder
# ├── espresence-mr60bha1-mmwave-sensor.yaml
# └── external_components
#     └── mr60bha1
#         ├── __init__.py
#         ├── mr60bha1_component.h
#         └── mr60bha1_component.cpp
#
external_components:
  - source: external_components
    components: [mr60bha1]

sensor:

mr60bha1:
    id: my_uart_sensor_instance
    uart_id: uart_bus
    heartstate:
      name: "${room} Heartrate State"
      state_class: measurement
    heartrate:
      name: "${room} Heartrate Level"
      state_class: measurement
    respstate:
      id: respstate_sensor
      name: "internal_respstate_sensor_to_text_template"
      internal: true
      on_value_range:
        - above: 3.5
          below: 4.5
          then:
          - text_sensor.template.publish:
              id: respstate_template
              state: "detecting"
        - above: 2.5
          below: 3.5
          then:
          - text_sensor.template.publish:
              id: respstate_template
              state: "too low"
        - above: 1.5
          below: 2.5
          then:
          - text_sensor.template.publish:
              id: respstate_template
              state: "too high"
        - above: 0.5
          below: 1.5
          then:
          - text_sensor.template.publish:
              id: respstate_template
              state: "normal"
        - below: 0.5
          then:
          - text_sensor.template.publish:
              id: respstate_template
              state: "none"
    resprate:
      name: "${room} Respiratory Rate"
      state_class: measurement
    activity:
      name: "${room} Activity Level"
      state_class: measurement
    distance:
      name: "${room} Distance (Meters)"
      state_class: measurement
      accuracy_decimals: 1
      filters:
        multiply: ${distance_multiplier}
    angle_x:
      name: "${room} Angle X"
      state_class: measurement
    angle_y:
      name: "${room} Angle Y"
      state_class: measurement
    angle_z:
      name: "${room} Angle Z"
      state_class: measurement
    presence:
      id: presence_sensor
      name: "internal_presence_sensor_to_binary_template"
      internal: true
      on_value:
        - binary_sensor.template.publish:
            id: presence_template
            state: !lambda return x > 0;
    motion:
      id: motion_sensor
      name: "internal_motion_sensor_to_binary_template"
      internal: true
      on_value:
        - binary_sensor.template.publish:
            id: motion_template
            state: !lambda return x > 0;
  
button:
  - platform: restart
    name: "Restart MCU: ${room}"
    entity_category: diagnostic
    on_press:
      - uart.write:
          id: uart_bus
          data: "resetSystem 0"
  - platform: template
    name: "Reset Radar Module: ${room}"
    id: reset_radar_module
    entity_category: diagnostic
    on_press:
      - uart.write: [0x53, 0x59, 0x01, 0x02, 0x00, 0x01, 0x0F, 0xBF, 0x54, 0x43]
      # just putting these placeholders here in case the frames are removed from documentation as has happened with other options
      # realtime_mode_frame
      # - uart.write: [0x53, 0x59, 0x84, 0x0F, 0x00, 0x01, 0x00, 0x40, 0x54, 0x43]
      # sleepstatus_mode_frame
      # - uart.write: [0x53, 0x59, 0x84, 0x0F, 0x00, 0x01, 0x01, 0x41, 0x54, 0x43]

binary_sensor:
  - platform: template
    id: presence_template
    name: "${room} Presence"
    device_class: occupancy
    filters:
      - delayed_off: 5s
  - platform: template
    id: motion_template
    name: "${room} Motion"
    device_class: motion

text_sensor:
  - platform: template
    id: respstate_template
    name: "${room} Respiratory State"
